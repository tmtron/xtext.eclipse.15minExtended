/*
 * generated by Xtext 2.10.0
 */
package org.example.domainmodel.validation

import org.eclipse.xtext.validation.Check
import org.example.domainmodel.domainmodel.DomainmodelPackage
import org.example.domainmodel.domainmodel.Entity
import org.example.domainmodel.domainmodel.Feature

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DomainmodelValidator extends AbstractDomainmodelValidator {
	
/*	
	@Check
	def void checkNameStartsWithCapital(Entity entity) {
		if (!Character.isUpperCase(entity.name.charAt(0))) {
			warning("Name should start with a capital",
				DomainmodelPackage.Literals.TYPE__NAME)
		}
	}
	
	@Check
	def void checkFeatureNameIsUnique(Feature f) {
		var superEntity = (f.eContainer as Entity).superType
		while (superEntity != null) {
			for (other : superEntity.features) {
				if (f.name == other.name) {
					error("Feature names must be unique",
						DomainmodelPackage.Literals.FEATURE__NAME)
				}
				
			}
			superEntity = superEntity.superType;
		}
		
	}
*/	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					DomainmodelPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	
}
